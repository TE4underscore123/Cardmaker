<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
<title>Card Maker</title>
<style>
  body {
    font-family: Arial, sans-serif;
    background: #222;
    color: white;
    display: flex;
    flex-direction: column;
    align-items: center;
    padding: 20px;
    gap: 30px;
  }
  .top-section {
    display: flex;
    gap: 20px;
    align-items: flex-start;
  }
  .controls {
    width: 250px;
    display: flex;
    flex-direction: column;
    gap: 10px;
    background: #333;
    padding: 15px;
    border-radius: 10px;
  }
  .controls input, .controls textarea, .controls select, .controls button {
    width: 100%;
    padding: 8px;
    font-size: 14px;
  }
  #card-preview {
    position: relative;
    width: 300px;
    height: 450px;
    background: #000;
    overflow: hidden;
    border-radius: 12px;
  }
  #card-frame {
    position: absolute;
    top: 0; left: 0;
    width: 100%;
    height: 100%;
    z-index: 3;
    pointer-events: none;
  }
  .art-container {
    position: absolute;
    top: 25px;
    left: 20px;
    width: 260px;
    height: 420px;
    overflow: hidden;
    border-radius: 8px;
    z-index: 1;
    background: #111;
    cursor: grab;
  }
  #art-preview {
    position: absolute;
    top: 0;
    left: 0;
    transform-origin: top left;
    user-select: none;
  }
  .mana, .attack, .health, .name, .desc, .extra-text {
    position: absolute;
    color: #fff;
    font-weight: bold;
    text-shadow: 2px 2px 3px black;
    z-index: 4;
    font-family: Arial, sans-serif;
  }
  .mana {
    top: 19px;
    left: 15px;
    width: 40px;
    text-align: center;
    font-size: 28px;
  }
  .attack {
    bottom: 13px;
    left: 45px;
    width: 40px;
    text-align: center;
    font-size: 26px;
  }
  .health {
    bottom: 13px;
    right: 45px;
    width: 40px;
    text-align: center;
    font-size: 26px;
  }
  .name { top: 225px; width: 100%; text-align: center; font-size: 18px; }
  .desc {
    top: 275px;
    width: 80%;
    left: 50%;
    transform: translateX(-50%);
    text-align: center;
    font-size: 14px;
    white-space: normal;
    word-wrap: break-word;
    overflow: hidden;
    max-height: 150px;
  }
  .extra-text {
    bottom: 21px;
    left: 50%;
    transform: translateX(-50%);
    font-size: 13px;
    text-align: center;
    width: 80%;
  }
  .spell-type {
    position: absolute;
    top: 227px;
    left: 14px;
    width: 40px;
    height: 40px;
    font-size: 12px;
    text-align: center;
    line-height: 40px;
    font-weight: bold;
    color: white;
    background: none;
    z-index: 5;
    text-shadow: 1px 1px 2px black;
    pointer-events: none;
  }
  .keyword-bar {
    position: absolute;
    top: 250px;
    width: 100%;
    display: flex;
    justify-content: center;
    gap: 5px;
    z-index: 5;
  }
  .keyword-container {
    position: relative;
    display: inline-block;
  }
  .keyword-container img {
    width: 35px;
    height: 27px;
    object-fit: contain;
    border-radius: 4px;
  }
  .remove-btn {
    position: absolute;
    top: -5px;
    right: -5px;
    background: red;
    color: white;
    font-size: 12px;
    border: none;
    border-radius: 50%;
    width: 16px;
    height: 16px;
    cursor: pointer;
    display: none;
    justify-content: center;
    align-items: center;
  }
  .keyword-container:hover .remove-btn {
    display: flex;
  }
  .icon-container {
    position: absolute;
    top: 22px;
    right: 23px;
    width: 30px;
    height: 30px;
    z-index: 4;
    overflow: hidden;
    border-radius: 50%;
    background: #222;
  }
  .icon-container img {
    width: 100%;
    height: 100%;
    object-fit: contain;
  }

  /* Gallery */
  #gallery {
    width: 90%;
    margin-top: 30px;
    display: flex;
    flex-direction: column;
    align-items: center;
  }
  #gallery h2 {
    margin-bottom: 15px;
  }
  .gallery-grid {
    display: flex;
    flex-wrap: wrap;
    gap: 15px;
    justify-content: center;
  }
  .gallery-item {
    background: #333;
    padding: 10px;
    border-radius: 8px;
    text-align: center;
  }
  .gallery-item canvas {
    width: 150px;
    border-radius: 8px;
    margin-bottom: 8px;
  }
  .gallery-item button {
    margin: 3px;
    padding: 5px 8px;
    font-size: 12px;
  }

  /* Move name and description down in spell mode */
  .name.spell-mode {
    top: 230px;
  }
  .desc.spell-mode {
    top: 280px;
  }
  .extra-text.spell-mode {
    bottom: 8px;
  }
</style>
</head>
<body>

<div class="top-section">
  <div class="controls">
    <label>Card Type:
      <select id="card-type">
        <option value="creature">Creature</option>
        <option value="spell">Spell</option>
      </select>
    </label>
    <label>Spell Type (for spell cards):
      <input type="text" id="spell-type" placeholder="e.g. Fast, Slow">
    </label>
    <label>Name: <input type="text" id="card-name"></label>
    <label>Mana: <input type="number" id="mana-cost"></label>
    <label>Attack: <input type="number" id="attack"></label>
    <label>Health: <input type="number" id="health"></label>
    <label>Upload Artwork: <input type="file" id="artwork" accept="image/*"></label>
    <label>Zoom:
      <input type="range" id="zoom-slider" min="0.01" max="10" step="0.1" value="1">
    </label>
    <label>Zoom Preset:
      <select id="zoom-select">
        <option value="0.25">0.25x</option>
        <option value="0.5">0.5x</option>
        <option value="1" selected>1x</option>
        <option value="1.5">1.5x</option>
        <option value="2">2x</option>
        <option value="3">3x</option>
        <option value="5">5x</option>
      </select>
    </label>
    <label>Description: <textarea id="description"></textarea></label>
    <label>Extra Text: <input type="text" id="extra-text"></label>

    <h3>Keywords</h3>
    <select id="keyword-select">
      <option value="Ichorborn">Ichorborn</option>
    </select>
    <input type="file" id="keyword-image" accept="image/*">
    <button id="add-keyword">Add Keyword</button>

    <h3>Top-Right Icon</h3>
    <input type="file" id="icon-upload" accept="image/*">
    
    <button id="download-btn">Download Card</button>
    <button id="save-btn">Save Card</button>
  </div>

  <div id="card-preview">
    <div class="art-container" id="art-container">
      <img id="art-preview" alt="Card Artwork">
    </div>
    <div class="keyword-bar" id="keyword-bar"></div>
    <div class="icon-container"><img id="icon-img" alt=""></div>
    <div class="spell-type" id="spell-type-display"></div>
    <img id="card-frame" src="card-frame-creature.png" alt="Card Frame">
    <div class="mana" id="mana-display">0</div>
    <div class="attack" id="attack-display">0</div>
    <div class="health" id="health-display">0</div>
    <div class="name" id="name-display">Card Name</div>
    <div class="desc" id="desc-display">Card description here</div>
    <div class="extra-text" id="extra-text-display"></div>
  </div>
</div>

<div id="gallery">
  <h2>Saved Cards</h2>
  <div class="gallery-grid" id="gallery-grid"></div>
</div>

<script src="https://cdn.jsdelivr.net/npm/html2canvas@1.4.1/dist/html2canvas.min.js"></script>
<script>
const nameInput = document.getElementById('card-name');
const manaInput = document.getElementById('mana-cost');
const attackInput = document.getElementById('attack');
const healthInput = document.getElementById('health');
const descInput = document.getElementById('description');
const extraTextInput = document.getElementById('extra-text');
const artInput = document.getElementById('artwork');
const zoomSlider = document.getElementById('zoom-slider');
const zoomSelect = document.getElementById('zoom-select');
const spellTypeInput = document.getElementById('spell-type');

const nameDisplay = document.getElementById('name-display');
const manaDisplay = document.getElementById('mana-display');
const attackDisplay = document.getElementById('attack-display');
const healthDisplay = document.getElementById('health-display');
const descDisplay = document.getElementById('desc-display');
const extraTextDisplay = document.getElementById('extra-text-display');
const spellTypeDisplay = document.getElementById('spell-type-display');
const artPreview = document.getElementById('art-preview');
const artContainer = document.getElementById('art-container');

const keywordSelect = document.getElementById('keyword-select');
const keywordImageInput = document.getElementById('keyword-image');
const addKeywordBtn = document.getElementById('add-keyword');
const keywordBar = document.getElementById('keyword-bar');

const iconUpload = document.getElementById('icon-upload');
const iconImg = document.getElementById('icon-img');

const cardTypeSelect = document.getElementById('card-type');
const cardFrame = document.getElementById('card-frame');
const attackDisplayEl = document.querySelector('.attack');
const healthDisplayEl = document.querySelector('.health');
const iconContainer = document.querySelector('.icon-container');

let keywordImageData = null;
let isDragging = false, startX, startY, offsetX = 0, offsetY = 0;

nameInput.addEventListener('input', () => nameDisplay.textContent = nameInput.value);
manaInput.addEventListener('input', () => manaDisplay.textContent = manaInput.value);
attackInput.addEventListener('input', () => attackDisplay.textContent = attackInput.value);
healthInput.addEventListener('input', () => healthDisplay.textContent = healthInput.value);
descInput.addEventListener('input', () => descDisplay.textContent = descInput.value);
extraTextInput.addEventListener('input', () => extraTextDisplay.textContent = extraTextInput.value);
spellTypeInput.addEventListener('input', () => spellTypeDisplay.textContent = spellTypeInput.value);

cardTypeSelect.addEventListener('change', () => {
  const isSpell = cardTypeSelect.value === 'spell';

  cardFrame.src = isSpell ? 'card-frame-spell.png' : 'card-frame-creature.png';
  attackDisplayEl.style.display = isSpell ? 'none' : 'block';
  healthDisplayEl.style.display = isSpell ? 'none' : 'block';
  attackInput.disabled = isSpell;
  healthInput.disabled = isSpell;
  spellTypeDisplay.style.display = isSpell ? 'block' : 'none';
  iconContainer.style.top = isSpell ? '24px' : '22px';

  nameDisplay.classList.toggle('spell-mode', isSpell);
  descDisplay.classList.toggle('spell-mode', isSpell);
  extraTextDisplay.classList.toggle('spell-mode', isSpell);
});
cardTypeSelect.dispatchEvent(new Event('change'));

artInput.addEventListener('change', e => {
  const file = e.target.files[0];
  if (!file) return;
  const reader = new FileReader();
  reader.onload = ev => {
    artPreview.src = ev.target.result;
    artPreview.style.top = '0px';
    artPreview.style.left = '0px';
    artPreview.style.transform = 'scale(1)';
    zoomSlider.value = 1;
    zoomSelect.value = "1";
  };
  reader.readAsDataURL(file);
});

iconUpload.addEventListener('change', e => {
  const file = e.target.files[0];
  if (!file) return;
  const reader = new FileReader();
  reader.onload = ev => iconImg.src = ev.target.result;
  reader.readAsDataURL(file);
});

keywordImageInput.addEventListener('change', e => {
  const file = e.target.files[0];
  if (!file) return;
  const reader = new FileReader();
  reader.onload = ev => keywordImageData = ev.target.result;
  reader.readAsDataURL(file);
});

addKeywordBtn.addEventListener('click', () => {
  if (!keywordImageData) { alert('Upload a keyword image first'); return; }
  const container = document.createElement('div');
  container.className = 'keyword-container';
  const img = document.createElement('img');
  img.src = keywordImageData;
  img.alt = keywordSelect.value;
  const btn = document.createElement('button');
  btn.textContent = '×';
  btn.className = 'remove-btn';
  btn.onclick = () => container.remove();
  container.appendChild(img);
  container.appendChild(btn);
  keywordBar.appendChild(container);
  keywordImageData = null;
  keywordImageInput.value = '';
});

artContainer.addEventListener('mousedown', e => {
  isDragging = true;
  startX = e.clientX - offsetX;
  startY = e.clientY - offsetY;
  artContainer.style.cursor = 'grabbing';
});
window.addEventListener('mousemove', e => {
  if (!isDragging) return;
  offsetX = e.clientX - startX;
  offsetY = e.clientY - startY;
  artPreview.style.left = offsetX + 'px';
  artPreview.style.top = offsetY + 'px';
});
window.addEventListener('mouseup', () => {
  isDragging = false;
  artContainer.style.cursor = 'grab';
});

// Fixed: Convert string values to numbers when comparing for closest zoom option
zoomSlider.addEventListener('input', () => {
  const scale = zoomSlider.value;
  artPreview.style.transform = `scale(${scale})`;

  let closest = [...zoomSelect.options].reduce((prev, option) => {
    const prevVal = parseFloat(prev.value);
    const optionVal = parseFloat(option.value);
    const currentScale = parseFloat(scale);
    return (Math.abs(optionVal - currentScale) < Math.abs(prevVal - currentScale) ? option : prev);
  });

  zoomSelect.value = closest.value;
});

zoomSelect.addEventListener('change', () => {
  const scale = zoomSelect.value;
  artPreview.style.transform = `scale(${scale})`;
  zoomSlider.value = scale;
});

document.getElementById('download-btn').addEventListener('click', () => {
  html2canvas(document.getElementById('card-preview'), { backgroundColor: null }).then(canvas => {
    const link = document.createElement('a');
    link.download = 'card.png';
    link.href = canvas.toDataURL();
    link.click();
  });
});

document.getElementById('save-btn').addEventListener('click', () => {
  html2canvas(document.getElementById('card-preview'), { backgroundColor: null }).then(canvas => {
    const gallery = document.getElementById('gallery-grid');
    const div = document.createElement('div');
    div.className = 'gallery-item';
    div.appendChild(canvas);

    const editBtn = document.createElement('button');
    editBtn.textContent = 'Edit';
    editBtn.onclick = () => loadCard(div);

    const downloadBtn = document.createElement('button');
    downloadBtn.textContent = 'Download';
    downloadBtn.onclick = () => {
      const link = document.createElement('a');
      link.download = 'card.png';
      link.href = canvas.toDataURL();
      link.click();
    };

    const deleteBtn = document.createElement('button');
    deleteBtn.textContent = 'Delete';
    deleteBtn.onclick = () => div.remove();

    div.appendChild(editBtn);
    div.appendChild(downloadBtn);
    div.appendChild(deleteBtn);
    gallery.appendChild(div);
  });
});

function loadCard(item) {
  alert('Edit functionality not fully implemented yet.');
}
</script>
</body>
</html>
